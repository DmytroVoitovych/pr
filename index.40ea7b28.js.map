{"mappings":"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","sources":["src/index.js","src/js/notify-params/notify-styles.js","src/js/modal/modalPagination.js"],"sourcesContent":["import { btnDayNight } from './js/btnDayNight';\nimport { renderMoviesList, scrollToTop } from './js/container';\nimport MovieAPiServer from './RequestApi/requestAPI';\nimport { refs } from './js/refs';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { paramsNotify } from './js/notify-params/notify-styles';\nimport { modalPagination } from './js/modal/modalPagination';\nconst controlLogin = document.querySelector('[data-auth]').dataset = window.localStorage.getItem('auth');\n\nlet currentGroup = 'home';\n\nconst movieAPiServer = new MovieAPiServer();\nmovieAPiServer.getGenresList();\nNotify.init(paramsNotify);\n\nrefs.pagginationList.addEventListener('click', onClickPagginationList);\nrefs.form.addEventListener('submit', onSubmitForm);\nrefs.galleryList.classList.add('home');\nfetchData();\n\nbtnDayNight();\n\n// function onClickPagginationList(event) {\n//   const currentPage = event.target.dataset.page;\n//   if (!currentPage) {\n//     return;\n//   }\n//   movieAPiServer.pageCounter = Number(currentPage);\n\nfunction checkCurrentPage() {\n  if (currentGroup === 'home') {\n    fetchData();\n  } else {\n    fetchMovieByQueryAgain();\n  }\n  scrollToTop();\n}\nfunction onClickPagginationList(event) {\n  const currentPage = event.target.dataset.page;\n  if (currentPage === '...') {\n    modalPagination(movieAPiServer.maxPages)\n      .then(page => {\n        console.log('перехід на сторінку ', page);\n        movieAPiServer.pageCounter = Number(page);\n        checkCurrentPage();\n      })\n      .catch(error => console.log(error));\n    return;\n  }\n  if (!currentPage) {\n    return;\n  }\n  movieAPiServer.pageCounter = Number(currentPage);\n  checkCurrentPage();\n}\n\nfunction fetchData() {\n  movieAPiServer.fetchTopMovies().then(data => {\n    // console.log('page=', apiService.page, '  maxPages=', apiService.maxPages);\n    clearList();\n    renderMoviesList(data, movieAPiServer.pageCounter, movieAPiServer.maxPages);\n  });\n  // .catch(error => {\n  //   return error;\n  // });\n}\n\nconst red = () =>\n  document.querySelector('.js-auth').setAttribute('href', '/js/AutoForm/form.html');\n\n  const funcAutoLoginControl = () => {\n  \n  if (controlLogin != 'true') {\n    console.log('test');\n    return document.querySelector('.js-auth').addEventListener('click', red);\n  }\n  return;\n  };\nfuncAutoLoginControl();\n\nfunction onSubmitForm(event) {\n  event.preventDefault();\n  const searchQuery = event.currentTarget.elements.searchQuery.value.trim();\n  refs.form.elements.searchQuery.value = '';\n  if (searchQuery === '') {\n    console.log('test');\n    Notify.failure('Please enter something', { width: '180px' });\n    return;\n  }\n  movieAPiServer.searchQuery = searchQuery;\n  const pageHome = movieAPiServer.pageCounter;\n  movieAPiServer.pageCounter = 1;\n  movieAPiServer\n    .fetchMovieByQuery()\n    .then(data => {\n      console.log(data);\n      if (data.results.length === 0) {\n        Notify.failure(\n          'Search result not successful.. Enter the correct movie name'\n        );\n        movieAPiServer.pageCounter = pageHome;\n        return;\n      }\n      movieAPiServer.maxPages = data.total_pages;\n      currentGroup = 'search';\n      clearList();\n      renderMoviesList(\n        data.results,\n        movieAPiServer.pageCounter,\n        movieAPiServer.maxPages\n      );\n    })\n    .catch(error => {\n      return error;\n    });\n}\nfunction fetchMovieByQueryAgain() {\n  movieAPiServer\n    .fetchMovieByQuery()\n    .then(data => {\n      clearList();\n      renderMoviesList(\n        data.results,\n        movieAPiServer.pageCounter,\n        movieAPiServer.maxPages\n      );\n    })\n    .catch(error => {\n      return error;\n    });\n}\nfunction clearList() {\n  refs.galleryList.innerHTML = '';\n  refs.pagginationList.innerHTML = '';\n}\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst paramsNotify = {\n  position: 'center-top',\n  timeout: 3000,\n  distance: '15px',\n  // fontAwesomeIconSize: '10px', //\n  width: '390px',\n\n  fontSize: '14px', //\n  cssAnimationStyle: 'from-top',\n  cssAnimationDuration: 600,\n  showOnlyTheLastOne: true,\n\n  useIcon: false,\n  clickToClose: true,\n  failure: {\n    background: 'rgba(0,0,0,0.1)',\n    textColor: '#FF001B',\n    notiflixIconColor: 'rgba(200,0,0,0.4)',\n  },\n  success: {\n    background: 'rgba(0,0,0,0.7)',\n    textColor: '#32c682',\n    notiflixIconColor: 'rgba(50,200,130,0.4)',\n  },\n};\nexport { paramsNotify };\n//  return Notify.failure('Search result not successful. Enter the correct movie name.');\n","import { refs } from '../refs';\n\n// refs.openModalBtn.addEventListener('click', toggleModal);\n\nexport function modalPagination(maxPages) {\n  const promise = new Promise((resolve, reject) => {\n    refs.closeModalBtn.addEventListener('click', onCloseModalPagination);\n    refs.formPagination.addEventListener('submit', onInputChange);\n    refs.closeFormButton.addEventListener('click', onCloseModalPagination);\n    refs.modalPagination\n      .querySelector('#pagination-input')\n      .setAttribute('max', maxPages);\n    refs.backdropPagination.dataset.page = '0';\n    toggleModal();\n    let timer = null;\n    timer = setInterval(() => {\n      if (refs.modalPagination.classList.contains('is-hidden')) {\n        const page = refs.backdropPagination.dataset.page;\n        clearInterval(timer);\n        if (Number(page) !== 0) {\n          resolve(page);\n        } else {\n          reject('перехід не відбувся');\n        }\n      }\n    }, 300);\n  });\n  return promise;\n}\n\nfunction toggleModal() {\n  refs.modalPagination.classList.toggle('is-hidden');\n}\n\nfunction onInputChange(event) {\n  event.preventDefault();\n  const page = event.currentTarget.elements.page.value;\n  refs.backdropPagination.dataset.page = page;\n  onCloseModalPagination();\n}\nfunction onCloseModalPagination(event) {\n  refs.formPagination.elements.page.value = '';\n  toggleModal();\n}\n"],"names":["$7kasF","parcelRequire","$4Nugj","$f7c9e6ee08dbb89f$var$toggleModal","refs","modalPagination","classList","toggle","$f7c9e6ee08dbb89f$var$onInputChange","event","preventDefault","page","currentTarget","elements","value","backdropPagination","dataset","$f7c9e6ee08dbb89f$var$onCloseModalPagination","formPagination","$b8f9b7833fa37166$var$controlLogin","document","querySelector","window","localStorage","getItem","$b8f9b7833fa37166$var$currentGroup","$b8f9b7833fa37166$var$movieAPiServer","$cmNEd","default","$b8f9b7833fa37166$var$checkCurrentPage","$b8f9b7833fa37166$var$fetchData","fetchMovieByQuery","then","data","$b8f9b7833fa37166$var$clearList","$g9G2c","renderMoviesList","results","pageCounter","maxPages","catch","error","scrollToTop","fetchTopMovies","getGenresList","$h6c0i","Notify","init","position","timeout","distance","width","fontSize","cssAnimationStyle","cssAnimationDuration","showOnlyTheLastOne","useIcon","clickToClose","failure","background","textColor","notiflixIconColor","success","pagginationList","addEventListener","currentPage","target","Promise","resolve","reject","closeModalBtn","closeFormButton","setAttribute","timer","setInterval","contains","clearInterval","Number","console","log","form","searchQuery","trim","pageHome","length","total_pages","galleryList","add","btnDayNight","$b8f9b7833fa37166$var$red","innerHTML","$b8f9b7833fa37166$var$funcAutoLoginControl"],"version":3,"file":"index.40ea7b28.js.map"}