{"mappings":"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","sources":["src/js/AutoForm/js/main.js","src/js/AutoForm/js/backend.js","src/js/AutoForm/js/regBtn.js","src/js/AutoForm/js/autorisation.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Block } from 'notiflix/build/notiflix-block-aio';\nimport { Autorisation } from './backend';\nimport { funcAutorisation } from './autorisation';\nimport { regVis } from './regBtn';\n\n  \nconst form = document.querySelector('[data-form]');\nconst regF = document.querySelector('[data-registr]');\nconst btnA = document.querySelector('.login100-form-btn');\nconst inputs = document.querySelectorAll('.validate-input');\n\n    \nconst funcSubmit = (e) => {   // авторизация\n    e.preventDefault();\n    const login =  e.currentTarget.elements.username.value.trim();\n    const pass = e.currentTarget.elements.pass.value.trim();\n       \n    if (login && login.length >= 4 || pass && pass.length >= 4) {\n        console.log(login);\n        console.log(pass);\n                   \n        e.currentTarget.reset();\n\n        btnA.disabled = true;\n        Block.dots('.login100-form '); // это лоадер перед запросом \n        \n              \n       return   funcAutorisation(login, pass).then(token => Autorisation.fetch(token)); // такен даем  на проверку\n    }\n     \n    else if (!login || !pass) {\n        Notify.info('поля должны быть заполнены')\n    }\n\n    else {\n        Notify.failure('Введите больше символов');\n    }\n};\n\n\n\n\n\n\n\nconst funcSubmitReg = (e) => { // регистрация \n    \n    e.preventDefault();\n    const login = e.currentTarget.elements.username.value.trim();\n    const email =  e.currentTarget.elements.email.value.trim();\n    const pass = e.currentTarget.elements.passReg.value.trim();\n    const btnSubmit = e.currentTarget.elements[2];\n   \n    if (login && login.length >= 4 && pass && pass.length >= 6) {\n        \n        const regObj = {\n            password: pass,\n            email: email,\n           };\n        \n       \n        e.currentTarget.reset();\n\n        btnA.disabled = true;\n        Block.dots('.login100-form '); // это лоадер перед запросом \n       \n       \n        return Autorisation.create(regObj)\n        \n    }\n     \n    else if (!login || !pass) {\n        btnA.disabled = true; \n       return Notify.info('поля должны быть заполнены')\n    }\n            \n    else {\n       btnA.disabled = true;  \n      return  Notify.failure('Введите больше символов');\n    }\n};\n\n\nform.addEventListener('submit', funcSubmit);  \nregF.addEventListener('submit', funcSubmitReg);  \ndocument.querySelector('.reg').addEventListener('click',  regVis);   \nwindow.addEventListener('load', (e) =>  e.preventDefault());\ndocument.querySelector('.formArrow').addEventListener('click', regVis);\n\n\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Block } from 'notiflix/build/notiflix-block-aio';\nimport { regVis } from './regBtn';\n\nexport class Autorisation {\n     \n    static create(accaunt) {\n         const API = 'AIzaSyCJO6J5S13Pdm3k-fiqWujVysknh69eHLg';\n        return fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${API}`, {\n            method: \"POST\",\n            body: JSON.stringify(accaunt),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n            \n        }).then(response => response.json()).then(response => {\n            if (response.error) {\n                Block.remove('.login100-form ')\n                Notify.failure('вы уже зарегистрированы');\n            }\n\n            else {\n                  console.log('yes');  // запрос отработал\n                Block.remove('.login100-form ')  // лоадер отключаем\n                regVis(); //перевод на форму регистрации\n             Notify.info('Регистрация успешна');\n            };\n        });\n}\n\n    static fetch(token) {\n        if (!token) {\n            console.log(token);\n            Block.remove('.login100-form ');\n            regVis();\n            return Promise.resolve(Notify.info('Зарегистрируйтесь в системе'));\n        }\n        else {\n            Block.remove('.login100-form ');\n             window.localStorage.setItem(`auth`, JSON.stringify(true));\n            Notify.success('Вы выпонили авторизацию');\n            return  time();  \n    }\n    \n       \n          \n      }\n\n}\n \nfunction time() {\n    setTimeout(() => window.location.replace('../../biblioteca.html'), 1000);\n};\n\n\n\n// если вдруг мне захочетя залезть в базу данных \n// fetch(`https://autorisation-cda1f-default-rtdb.europe-west1.firebasedatabase.app/accaunt.json?auth=${token}}`).then( // если токен есть забираем \n//          response => console.log(response.json())).then(baza => {  console.log(baza);\n//              if (baza.error) {  // проверка на ошибку\n//              return console.log('error');\n//              }\n             \n//              return baza ? Object.keys(baza).map(key => ({  //   разбираю  базу если что то есть \n//                  ...baza[key],\n//                  id: key,\n//              })) : [];   // иначе сервак как это часто бывает возвращает пустой массив\n\n//          });","\n\nexport const regVis = () => {\n    document.querySelector('.regDiv').classList.toggle('regVis');\n    document.querySelector('.login100-form-title').classList.toggle('regAc');\n};  ","\n\n\nexport const funcAutorisation = (email, password) => {\n    const API = 'AIzaSyCJO6J5S13Pdm3k-fiqWujVysknh69eHLg';\n   return  fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${API}`, {\n        method: \"POST\",\n        body: JSON.stringify({ email, password, returnSecureToken: true }),\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    }).then(response => response.json()).then(data => data.idToken);  \n};"],"names":["$h6c0i","parcelRequire","$8MBJY","$f459c0ba99318f80$export$1ba1eca5dc0dba45","document","querySelector","classList","toggle","$80bf772c4bb9f866$export$8bf2428e94a919cc","Autorisation","key","accaunt","fetch","concat","method","body","JSON","stringify","headers","then","response","json","error","$gqlUR","Block","remove","Notify","failure","console","log","info","token","window","localStorage","setItem","success","setTimeout","location","replace","Promise","resolve","$3ec58ef2eade4954$var$form","$3ec58ef2eade4954$var$regF","$3ec58ef2eade4954$var$btnA","querySelectorAll","addEventListener","e","preventDefault","email","password","login","currentTarget","elements","username","value","trim","pass","length","reset","disabled","dots","returnSecureToken","data","idToken","passReg","regObj","create"],"version":3,"file":"form.761d2a71.js.map"}