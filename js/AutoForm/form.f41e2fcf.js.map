{"mappings":"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","sources":["src/js/AutoForm/js/main.js","src/js/AutoForm/js/backend.js","src/js/AutoForm/js/regBtn.js","src/js/AutoForm/js/autorisation.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Block } from 'notiflix/build/notiflix-block-aio';\nimport { Autorisation } from './backend';\nimport { funcAutorisation } from './autorisation';\nimport { regVis } from './regBtn';\n\n  \nconst form = document.querySelector('[data-form]');\nconst regF = document.querySelector('[data-registr]');\nconst btnA = document.querySelector('.login100-form-btn');\nconst inputs = document.querySelectorAll('.validate-input');\n\n    \nconst funcSubmit = (e) => {   // авторизация\n    e.preventDefault();\n    const login =  e.currentTarget.elements.username.value.trim();\n    const pass = e.currentTarget.elements.pass.value.trim();\n       \n    if (login && login.length >= 4 && pass && pass.length >= 4) {\n        console.log(login);\n        console.log(pass);\n                   \n        e.currentTarget.reset();\n\n        \n        Block.dots('.login100-form '); // это лоадер перед запросом \n        \n              \n       return   funcAutorisation(login, pass).then(token => Autorisation.fetch(token)); // такен даем  на проверку\n    }\n     \n    else if (!login || !pass) {\n        Notify.info('поля должны быть заполнены')\n    }\n\n    else {\n        Notify.failure('Введите больше символов');\n    }\n};\n\n\n\n\n\n\n\nconst funcSubmitReg = (e) => { // регистрация \n    \n    e.preventDefault();\n    const login = e.currentTarget.elements.username.value.trim();\n    const email =  e.currentTarget.elements.email.value.trim();\n    const pass = e.currentTarget.elements.passReg.value.trim();\n   \n   \n    if (login && login.length >= 4 && pass && pass.length >= 6 && email.length >=4 ) {\n        \n        const regObj = {\n            password: pass,\n            email: email,\n           };\n        \n       \n        e.currentTarget.reset();\n\n        \n        Block.dots('.login100-form '); // это лоадер перед запросом \n       \n       \n        return Autorisation.create(regObj)\n        \n    }\n     \n    else if (!login || !pass || !email) {\n        \n       return Notify.info('поля должны быть заполнены')\n    }\n        \n         else if (!email) {\n        \n       return Notify.info('поля должны быть заполнены')\n    }\n            \n    else {\n        \n      return  Notify.failure('Введите больше символов');\n    }\n};\n\n\nform.addEventListener('submit', funcSubmit);  \nregF.addEventListener('submit', funcSubmitReg);  \ndocument.querySelector('.reg').addEventListener('click',  regVis);   \n// window.addEventListener('load', (e) =>  e.preventDefault());\ndocument.querySelector('.formArrow').addEventListener('click', regVis);\ndocument.querySelector('.homeBtnLink').addEventListener('click', back);\n\nfunction back() {\n    setTimeout(() => window.location.replace('../../index.html'), 1000);\n};","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Block } from 'notiflix/build/notiflix-block-aio';\nimport { regVis } from './regBtn';\n\nexport class Autorisation {\n     \n    static create(accaunt) {\n         const API = 'AIzaSyCJO6J5S13Pdm3k-fiqWujVysknh69eHLg';\n        return fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${API}`, {\n            method: \"POST\",\n            body: JSON.stringify(accaunt),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n            \n        }).then(response => response.json()).then(response => {\n            if (response.error) {\n                Block.remove('.login100-form ')\n                Notify.failure('вы уже зарегистрированы');\n            }\n\n            else {\n                  console.log('yes');  // запрос отработал\n                Block.remove('.login100-form ')  // лоадер отключаем\n                regVis(); //перевод на форму регистрации\n             Notify.info('Регистрация успешна');\n            };\n        });\n}\n\n    static fetch(token) {\n        const controlLogin = window.localStorage.getItem('auth');\n        if (!token) {\n            console.log(token);\n            Block.remove('.login100-form ');\n            regVis();\n            return Promise.resolve(Notify.info('Зарегистрируйтесь в системе'));\n        }\n\n          \n        else if (controlLogin) { \n         Block.remove('.login100-form');   \n         return  Notify.info('Вы уже авторизованы');  \n        }\n            \n        else {\n            Block.remove('.login100-form ');\n             window.localStorage.setItem(`auth`, JSON.stringify(true));\n            Notify.success('Вы выпонили авторизацию');\n            return  time();  \n    }\n    \n       \n          \n      }\n\n}\n \nfunction time() {\n    setTimeout(() => window.location.replace('../../biblioteca.html'), 1000);\n};\n\n\n\n// если вдруг мне захочетя залезть в базу данных \n// fetch(`https://autorisation-cda1f-default-rtdb.europe-west1.firebasedatabase.app/accaunt.json?auth=${token}}`).then( // если токен есть забираем \n//          response => console.log(response.json())).then(baza => {  console.log(baza);\n//              if (baza.error) {  // проверка на ошибку\n//              return console.log('error');\n//              }\n             \n//              return baza ? Object.keys(baza).map(key => ({  //   разбираю  базу если что то есть \n//                  ...baza[key],\n//                  id: key,\n//              })) : [];   // иначе сервак как это часто бывает возвращает пустой массив\n\n//          });","\n\nexport const regVis = () => {\n    document.querySelector('.regDiv').classList.toggle('regVis');\n    document.querySelector('.login100-form-title').classList.toggle('regAc');\n};  ","\n\n\nexport const funcAutorisation = (email, password) => {\n    const API = 'AIzaSyCJO6J5S13Pdm3k-fiqWujVysknh69eHLg';\n   return  fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${API}`, {\n        method: \"POST\",\n        body: JSON.stringify({ email, password, returnSecureToken: true }),\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    }).then(response => response.json()).then(data => data.idToken);  \n};"],"names":["$iQIUW","parcelRequire","$0f32ba1e6e52819b$export$1ba1eca5dc0dba45","document","querySelector","classList","toggle","$9075f2687bd89b25$export$8bf2428e94a919cc","static","accaunt","fetch","method","body","JSON","stringify","headers","then","response","json","error","$6UFyE","Block","remove","Notify","failure","console","log","info","token","controlLogin","window","localStorage","getItem","setItem","success","setTimeout","location","replace","Promise","resolve","$4836d84361cffec3$var$form","$4836d84361cffec3$var$regF","querySelectorAll","addEventListener","e","preventDefault","login","currentTarget","elements","username","value","trim","pass","length","reset","dots","email","password","returnSecureToken","data","idToken","passReg","regObj","create"],"version":3,"file":"form.f41e2fcf.js.map"}